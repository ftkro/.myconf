" Basic Settings
"set autoindent
"set smartindent
set tabstop=4
set shiftwidth=4
set noexpandtab
set softtabstop=0
set hlsearch
set ruler
set number
set title
set incsearch
set wildmenu wildmode=list:full
set showmatch
set cursorline
set backspace=indent,eol,start
set whichwrap=b,s,h,l,<,>,[,]
set confirm
set autoread
set ignorecase
set smartcase
set gdefault
set smartindent
set autoindent
set clipboard=unnamed,unnamedplus
set mouse=a
set nocompatible
set nostartofline
set matchpairs& matchpairs+=<:>
set shiftround
set showcmd
cmap w!! w !sudo tee > /dev/null %
set scrolloff=5
set shellslash
set history=25
syntax on
set t_Co=256
autocmd FileType * setlocal formatoptions-=r
autocmd FileType * setlocal formatoptions-=o
if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    if has('mac')
      let &fileencodings = s:enc_jis .','. s:enc_euc
      let &fileencodings = &fileencodings .','. s:fileencodings_default
    else
      let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
      let &fileencodings = &fileencodings .','. s:fileencodings_default
    endif
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  unlet s:enc_euc
  unlet s:enc_jis
endif
set hidden
set nomodeline
set nocompatible

if has('vim_starting')
  set nocompatible
  if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
    echo "install neobundle..."
    :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
  endif
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('~/.vim/bundle'))
let g:neobundle_default_git_protocol='https'

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'vim-scripts/sh.vim'
NeoBundle 'ConradIrwin/vim-bracketed-paste'
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
  \     'windows' : 'make -f make_mingw32.mak',
  \     'cygwin' : 'make -f make_cygwin.mak',
  \     'mac' : 'make -f make_mac.mak',
  \     'unix' : 'make -f make_unix.mak',
  \    },
  \ }
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'Townk/vim-autoclose'
NeoBundleLazy 'tpope/vim-endwise', {
  \ 'autoload' : { 'insert' : 1,}}
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'vim-scripts/AnsiEsc.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'easymotion/vim-easymotion'

NeoBundleCheck

call neobundle#end()

"Plugin Setting

let g:sh_indent_case_labels=1
filetype plugin indent on
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2
let g:syntastic_mode_map = {'mode': 'passive'}
augroup AutoSyntastic
	autocmd!
	autocmd InsertLeave,TextChanged * call s:syntastic()
augroup END
function! s:syntastic()
	w
	SyntasticCheck
endfunction
set background=dark
colorscheme hybrid
let g:EasyMotion_leader_key = '<Space>'
